[tool.poetry]
name = "Pipidastr"
version = "0.0.1"
description = ""
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
aiogram = "^3.10.0"
loguru = "^0.7.2"
typed-argument-parser = "^1.10.1"
pydantic = "^2.8.2"
python-dotenv = "^1.0.1"
pydantic-settings = "^2.3.4"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.1"
mypy = "^1.10.1"
pyright = "^1.1.371"
pytest = "^8.2.2"
black = "^24.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[project]
name = "Pipidastr"
description = ""
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "You name", email = "you@example.com" }]


[project.license]
file = "LICENSE"


[tool.ruff]
line-length = 120
target-version = "py312"
select = ["ALL"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".env",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env",
]
ignore = [
    "D100",   # Docstring in public module
    "D104",   # Docstring in public package
    "D107",   # Docstring __init__ method
    "D203",   # Docstring one blank line before class
    "D213",   # Docstring multi-line-summary-second-line
    "UP007",  # Use X | Y insted Optional, Union
    "ANN002", # Docstring missing-type-args
    "ANN003", # Docstring missing-type-kwargs
    "ANN101", # Docstring missing-type-self
    "ANN102", # Docstring missing-type-cls
    "ANN401", # Docstring Any type
    "S101",   # Detected assert statement
    "S311",   # Detected pseudo-random generators
    "FBT001", # Detected boolean positional arg in functions
    "FBT002", # Detected boolean default value in functions
    "B006",   # Detected mutable arg default
    "B009",   # Detected getattr(obj, ...)
    "B010",   # Detected setattr(obj, ..., ...)
    "INP001", # Check missing __init__.py in packages
    "PIE796", # Check for enums that contain duplicate values
    "T201",   # Check for print statement
    "T203",   # Check for pprint statement
    "PYI001", # Check that type TypeVar, ... def in stubs are prefixed with _
    "PYI024", # Check use collections.nametuple
    "RET504", # Check vars which that immediately precede a return eq assign var
    "PTH123", # Check open() instead Path.open()
    "TD002",  # Check TODO comments includes an author
    "TD002",  # Check TODO comments includes a links
    "PGH003", # Check 'type: ignore' without annotation warn are intended to be suppressed
    "PGH004", # Check 'noqa' without annotation diagnostics are intended to be suppressed
]


[tool.ruff.pydocstyle]
convention = "google"


[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]


[tool.ruff.mccabe]
max-complexity = 10


[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true


[tool.black]
line-length = 120
target-version = ["py312"]
